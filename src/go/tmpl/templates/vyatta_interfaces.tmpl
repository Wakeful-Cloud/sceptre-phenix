#!/usr/bin/env bash

###############################################################################
#                                                                             #
#                 ██████╗ ██╗  ██╗███████╗███╗  ██╗██╗██╗  ██╗                #
#                 ██╔══██╗██║  ██║██╔════╝████╗ ██║██║╚██╗██╔╝                #
#                 ██████╔╝███████║█████╗  ██╔██╗██║██║ ╚███╔╝                 #
#                 ██╔═══╝ ██╔══██║██╔══╝  ██║╚████║██║ ██╔██╗                 #
#                 ██║     ██║  ██║███████╗██║ ╚███║██║██╔╝╚██╗                #
#                 ╚═╝     ╚═╝  ╚═╝╚══════╝╚═╝  ╚══╝╚═╝╚═╝  ╚═╝                #
#                                                                             #
#                                                                             #
###############################################################################
# File: configure network interfaces (for Vyatta/VyOS)
###############################################################################

{{- if and .Network (gt (.Network.NumInterfaces "wifi") 0) }}
# Helper functions
function require_command {
    if [ ! $(command -v $1) ]; then
        echo "Command '$1' not found. Please install it."
        exit 1
    fi
}

# [ ----- Begin wifi initial setup ----- ]

# Ensure prerequisites are installed
require_command modprobe

# Load the mac80211_hwsim module
modprobe mac80211_hwsim radios=0

# [ ----- End wifi initial setup ----- ]

{{- $ifaces := .Network.Interfaces -}}
{{- $routes := .Network.Routes }}

# Configure interfaces
{{- range $idx, $iface := $ifaces }}
    {{- if ne $iface.Type "wifi" }}
    {{- continue }}
    {{- end }}

# [ ----- Begin interface {{ $iface.Name }} (#{{ $idx }}) ----- ]

    {{- if eq $iface.Type "wifi" }}

# Ensure prerequisites are installed
require_command vwifi-add-interfaces
require_command hostapd
require_command wpa_supplicant

# Add the interface
vwifi-add-interfaces 1 {{ if ne $iface.MAC "" }}{{ $iface.MAC }}{{ end}}

        {{- if eq $iface.Wifi.Mode "ap" }}

# Start the vwifi hostapd service
systemctl enable --now vwifi-hostapd@{{ $iface.Name }}
        {{- else if eq $iface.Wifi.Mode "infrastructure" }}

# Start the vwifi wpa_supplicant service
systemctl enable --now vwifi-wpa_supplicant@{{ $iface.Name }}
        {{- end }}
    {{- end }}

# Use the ip command if available
if command -v ip 2>&1 > /dev/null; then
    # Device name
    DEVICE_NAME="{{ $iface.Name }}"

    # Bring the device down and reset the configuration
    ip link set dev "$DEVICE_NAME" down
    ip address flush dev "$DEVICE_NAME"

    # Configure the device
        {{- if or ($iface.QinQ) (eq $iface.Proto "manual") }}
    ip link set dev "$DEVICE_NAME" up
        {{- else if eq $iface.Proto "dhcp" }}
    ip link set dev "$DEVICE_NAME" up
    dhclient "$DEVICE_NAME"
        {{- else }}
    ip address add {{ $iface.Address }}/{{ $iface.Mask }} dev "$DEVICE_NAME"
    ip link set dev "$DEVICE_NAME" up
            {{- if ne $iface.Gateway "" }}
    ip route add default via {{ $iface.Gateway }} dev "$DEVICE_NAME"
            {{- end }}
        {{- end }}

    # Add routes
        {{- range $route := $routes }}
    ip route add {{ $route.Destination }} via {{ $route.Next }}
        {{- end }}
# Otherwise fallback to the ifconfig command
else
    # Get the device name
    DEVICE_NAME="{{ $iface.Name }}"

    # Bring the device down
    ifconfig "$DEVICE_NAME" down

    # Configure the device
        {{- if or ($iface.QinQ) (eq $iface.Proto "manual") }}
    ifconfig "$DEVICE_NAME" up
        {{- else if eq $iface.Proto "dhcp" }}
    ifconfig "$DEVICE_NAME" up
    dhclient "$DEVICE_NAME"
        {{- else }}
    ifconfig "$DEVICE_NAME" {{ $iface.Address }} netmask {{ cidrToMask (print $iface.Address "/" $iface.Mask) }}
    ifconfig "$DEVICE_NAME" up
            {{- if ne $iface.Gateway "" }}
    route add default gw {{ $iface.Gateway }} dev "$DEVICE_NAME"
            {{- end }}
        {{- end }}

    # Add routes
        {{- range $route := $routes }}
    route add -net {{ $route.Destination }} gw {{ $route.Next }}
        {{- end }}
fi

# Configure DNS
    {{- range $server := $iface.DNS }}
echo "nameserver {{ $server }}" >> /etc/resolv.conf
    {{- end }}

# [ ----- End interface {{ $iface.Name }} (#{{ $idx }}) ----- ]
{{- end }}

# [ ----- Begin wifi final setup ----- ]

# Ensure prerequisites are installed
require_command vwifi-client

# Start the client
systemctl enable --now vwifi-client

# [ ----- End wifi final setup ----- ]
{{- end }}
